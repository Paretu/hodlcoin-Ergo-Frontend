@using HodlCoin.Client.HodlCoinImpl;
@using System.Text.Json;
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using FleetSharp.Types;
@using HodlCoin.Client.Popups;

<MudThemeProvider IsDarkMode=true Theme="_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    @*<div class="sidebar">
         <NavMenu /> 
    </div>*@

    <main>
        <div class="top-row auth px-4" style="background-color: rgba(0,0,0,0.00); border-bottom: unset;">
            @if(Parameters.NETWORK != Network.Mainnet)
            {
                <MudText Color="Color.Warning" Align="Align.Left" Class="mr-4">!!! TESTNET VERSION !!!</MudText>
            }
            <div style="float: right">
                <MudStack Row=true Style="align-items: center;">
                    @if (!@isConnected)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConnectWallet">Connect wallet</MudButton>
                    }
                    else
                    {
                        <MudText>@hodlCoinBalanceText</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DisconnectWallet">Disconnect wallet</MudButton>
                    }
                </MudStack>
               
            </div>
            
        </div>

        <article class="content px-4" style="min-height: calc(100vh - 3.5rem - 2vh - 32px);">
            <CascadingValue Value=updateWalletInfo>
                @Body
            </CascadingValue>
        </article>

        <div class="bottom-row px-4" style="text-align: right;">
            <MudChip Icon="@Icons.Material.Filled.Info" Label="true" Variant="Variant.Outlined" OnClick="ShowWhatIsHodlCoin">What is hodlCoin?</MudChip>
            <MudChip Icon="@Icons.Material.Filled.StickyNote2" Label="true" Variant="Variant.Outlined" OnClick="ShowKYA">Know Your Assumptions</MudChip>
            <MudChip Icon="@Icons.Material.Filled.Newspaper" Label="true" Variant="Variant.Outlined" Href="https://eprint.iacr.org/2023/1029" Target="_blank">hodlCoin Paper</MudChip>
            <MudChip Icon="@Icons.Custom.Brands.Telegram" Label="true" Variant="Variant.Outlined" Href="https://t.me/hodlCoinGame" Target="_blank">Telegram</MudChip>
            <MudChip Icon="@Icons.Custom.Brands.GitHub" Label="true" Variant="Variant.Outlined" Href="https://github.com/PhoenixErgo/phoenix-hodlcoin-contracts" Target="_blank">Phoenix hodlCoin contracts</MudChip>
            <MudChip Icon="@Icons.Custom.Brands.GitHub" Label="true" Variant="Variant.Outlined" Href="https://github.com/pulsarz/hodlcoin-frontend" Target="_blank">User Interface</MudChip>
        </div>
    </main>
</div>

@code {
    bool isConnected = false;
    string hodlCoinBalanceText = "";

    EventCallback updateWalletInfo => EventCallback.Factory.Create(this, SetUIbasedOnWalletStatus);

    private readonly MudTheme _currentTheme = new()
        {
            PaletteDark = new PaletteDark
            {
                Primary = "#FB8C00",
                Secondary = "#607D8B",
                Info = "#a4c2dd",
                Success = "#2ECC40",
                Warning = "#dc2d7e",
                Error = "#de2000",
                AppbarBackground = "#121212",
                TextPrimary = "#E0E0E0",
                TextSecondary = "#BDBDBD",
                // more color properties
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //already called in updateui in component
            // _= SetUIbasedOnWalletStatus();
        }
    }

    private async Task ShowKYA()
    {
        var dialog = await DialogService.ShowAsync<KYAPopup>("Know Your Assumptions");
    }

    private async Task ShowWhatIsHodlCoin()
    {
        var dialog = await DialogService.ShowAsync<WhatIsHodlCoinPopup>("What is hodlCoin?", new DialogOptions { CloseButton = true, CloseOnEscapeKey = true });
    }

    private async Task SetUIbasedOnWalletStatus()
    {
        //Check if connected
        isConnected = await Wallet.IsWalletConnected(JS, localStorage);
        Console.WriteLine($"Wallet connected = {isConnected}");

        List<string> coinTexts = new List<string>();

        if(isConnected)
        {
            //get all addresses
            List<string> addresses = await Wallet.GetWalletAddressList(JS);
            Console.WriteLine($"All wallet addresses: {JsonSerializer.Serialize(addresses)}");

            //use explorer directly instead of wallet since wallet balance does not update until you reopen nautilus for some reason (well, use node interface).
            var balances = await Config.explorer.GetAddressesBalances(addresses);
            Console.WriteLine($"All wallet addresses balances: {JsonSerializer.Serialize(balances)}");
            //todo: account for unconfirmed?
            var flatTokens = balances.Where(x => x.confirmed != null && x.confirmed.tokens != null).SelectMany(x => x.confirmed.tokens).ToList();

            //get balance of all hodlTokens
            foreach (HodlTokenInfo entry in Parameters.tokens)
            {
                //var balance = await Wallet.GetBalance(JS, entry.tokenId);
                var balance = flatTokens.Where(x => x.tokenId == entry.tokenId).Sum(x => x.amount);
                if (balance > 0) coinTexts.Add($"{(balance / Math.Pow(10, entry.decimals)).ToString()} {entry.name}");
            }

            hodlCoinBalanceText = string.Join(" | ", coinTexts);
        }

        StateHasChanged();
    }

    private async void ConnectWallet()
    {
        var dialog = await DialogService.ShowAsync<WalletConnectPopup>("Select a wallet");
        var ret = await dialog.Result;

        if (!ret.Canceled)
        {
            await Wallet.ConnectWallet(JS, localStorage, (string)ret.Data);
            await SetUIbasedOnWalletStatus();
        }
    }

    private async void DisconnectWallet()
    {
        await Wallet.DisconnectWallet(JS, localStorage);
        await SetUIbasedOnWalletStatus();
    }
}
