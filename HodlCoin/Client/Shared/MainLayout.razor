@using HodlCoin.Client.HodlCoinImpl;
@using System.Text.Json;
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider IsDarkMode=true />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    @*<div class="sidebar">
         <NavMenu /> 
    </div>*@

    <main>
        <div class="top-row auth px-4" style="background-color: rgba(0,0,0,0.00); border-bottom: unset;">
            <div style="float: right">
                <MudStack Row=true Style="align-items: center;">
                    @if (!@isConnected)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConnectWallet">Connect wallet</MudButton>
                    }
                    else
                    {
                        <MudText>@hodlCoinBalanceText</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DisconnectWallet">Disconnect wallet</MudButton>
                    }
                </MudStack>
               
            </div>
            
        </div>

        <article class="content px-4" style="height: calc(100vh - 3.5rem - 2vh);">
            <CascadingValue Value=updateWalletInfo>
                @Body
            </CascadingValue>
        </article>
    </main>
</div>

@code {
    bool isConnected = false;
    string hodlCoinBalanceText = "";

    EventCallback updateWalletInfo => EventCallback.Factory.Create(this, SetUIbasedOnWalletStatus);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //already called in updateui in component
           // _= SetUIbasedOnWalletStatus();
        }
    }

    private async Task SetUIbasedOnWalletStatus()
    {
        //Check if connected
        isConnected = await Wallet.IsWalletConnected(JS, localStorage);
        Console.WriteLine($"Wallet connected = {isConnected}");

        List<string> coinTexts = new List<string>();

        if(isConnected)
        {
            //get all addresses
            List<string> addresses = await Wallet.GetWalletAddressList(JS);
            Console.WriteLine($"All wallet addresses: {JsonSerializer.Serialize(addresses)}");

            //use explorer directly instead of wallet since wallet balance does not update until you reopen nautilus for some reason (well, use node interface).
            var balances = await Config.explorer.GetAddressesBalances(addresses);
            Console.WriteLine($"All wallet addresses balances: {JsonSerializer.Serialize(balances)}");
            //todo: account for unconfirmed?
            var flatTokens = balances.Where(x => x.confirmed != null && x.confirmed.tokens != null).SelectMany(x => x.confirmed.tokens).ToList();

            //get balance of all hodlTokens
            foreach (HodlTokenInfo entry in Parameters.tokens)
            {
                //var balance = await Wallet.GetBalance(JS, entry.tokenId);
                var balance = flatTokens.Where(x => x.tokenId == entry.tokenId).Sum(x => x.amount);
                if (balance > 0) coinTexts.Add($"{(balance / Math.Pow(10, entry.decimals)).ToString()} {entry.name}");
            }

            hodlCoinBalanceText = string.Join(" | ", coinTexts);
        }

        StateHasChanged();
    }

    private async void ConnectWallet()
    {
        await Wallet.ConnectWallet(JS, localStorage);
        await SetUIbasedOnWalletStatus();
    }

    private async void DisconnectWallet()
    {
        await Wallet.DisconnectWallet(JS, localStorage);
        await SetUIbasedOnWalletStatus();
    }
}
