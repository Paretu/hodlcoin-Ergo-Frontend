@page "/"
@using System.Text.Json;
@using FleetSharp;
@using FleetSharp.Builder;
@using FleetSharp.Types;
@using HodlCoin.Client.HodlCoinImpl;
@using HodlCoin.Client.Popups;
@using MudExtensions.Enums
@using System.Globalization;
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>hodlCoin</PageTitle>


<MudTabs Position="Position.Top" Rounded="true" ApplyEffectsToContainer="true" Centered="true" PanelClass="pa-6 tabFullHeightAndScroll" Color="@Color.Dark" Elevation="0" Style="height: 100%;">
        @foreach (var token in HodlCoinImpl.Parameters.tokens)
        {
            string text = token.description;
            <MudTabPanel Text="@text" Style="height: 100%;">
                <CascadingValue Value=updateWalletInfo>
                <HodlComponent hodlToken="@token"></HodlComponent>
                </CascadingValue>
            </MudTabPanel>
        }
    </MudTabs>



@code {
    [CascadingParameter]
    public EventCallback updateWalletInfo { get; set; }

    HodlTokenInfo test = HodlCoinImpl.Parameters.tokens.First();
    protected override async Task OnInitializedAsync()
    {
        await CheckKYA();
    }

    private async Task CheckKYA()
    {
        var kyaDone = await localStorage.GetItemAsync<bool>("kyaDone");
        if (kyaDone != true)
        {
            var options = new DialogOptions { DisableBackdropClick = true };
            var dialog = await DialogService.ShowAsync<KYAPopup>("Know Your Assumptions", options);
            var ret = await dialog.Result;

            if ((bool)ret.Data == true)
            {
                await localStorage.SetItemAsync("kyaDone", true);
            }
        }
    }
}

